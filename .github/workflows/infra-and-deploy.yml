# .github/workflows/infra-and-deploy.yml
name: Infra + App Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Which Terraform action to run'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_WORKING_DIR: infra

jobs:
  terraform:
    name: "üõ†Ô∏è Terraform ${{ github.event.inputs.terraform_action }}"
    runs-on: ubuntu-latest

    # Inject your Azure IDs so Terraform picks them up as variables
    env:
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Cache Terraform state & providers
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform
            ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
          key: ${{ runner.os }}-tf-${{ hashFiles('infra/**/*.tf') }}
          restore-keys: ${{ runner.os }}-tf-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false -no-color -reconfigure

      - name: Terraform Plan
        if: ${{ github.event.inputs.terraform_action != 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.terraform_action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Terraform Destroy
        if: ${{ github.event.inputs.terraform_action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -input=false -auto-approve

  deploy:
    name: "üöÄ Deploy App"
    needs: terraform
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.terraform_action == 'apply' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package App
        run: zip -r app_package.zip .

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.WEBAPP_NAME }}
          publish-profile: ${{ secrets.PUBLISH_PROFILE }}
          package: app_package.zip
